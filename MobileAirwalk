-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.CoreGui -- Use CoreGui to avoid potential issues

-- Create Frame for draggable GUI
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 100, 0, 50)
mainFrame.Position = UDim2.new(0.5, -50, 0.5, -25)
mainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
mainFrame.Parent = screenGui

-- Create Drag Handle
local dragHandle = Instance.new("Frame")
dragHandle.Size = UDim2.new(0, 20, 0, 20)
dragHandle.Position = UDim2.new(1, -20, 0, 0)
dragHandle.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
dragHandle.Parent = mainFrame

-- Create Jump Button
local jumpButton = Instance.new("TextButton")
jumpButton.Size = UDim2.new(1, -20, 1, 0)
jumpButton.Position = UDim2.new(0, 0, 0, 0)
jumpButton.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
jumpButton.Text = "Jump"
jumpButton.TextColor3 = Color3.fromRGB(255, 255, 255)
jumpButton.Parent = mainFrame

-- Function to make the player jump
local function makePlayerJump()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    else
        warn("Humanoid not found in character.")
    end
end

-- Connect the button click to the jump function
jumpButton.MouseButton1Click:Connect(makePlayerJump)

-- Enable dragging of the mainFrame using the dragHandle
local dragging
local dragInput
local dragStart
local startPos

local function updateInput(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

dragHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

dragHandle.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateInput(input)
    end
end)

-- Function to create an invisible platform under the player
local function createInvisiblePlatform()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    local block = Instance.new("Part")
    block.Size = Vector3.new(10, 1, 10) -- Adjust the size as needed
    block.Anchored = true
    block.Transparency = 1 -- Make the block invisible
    block.CanCollide = true
    block.Parent = workspace

    local runService = game:GetService("RunService")

    local function rainbowColor(t)
        local frequency = 0.5 -- Adjust the frequency to control the speed of the color change
        local r = math.sin(frequency * t + 0) * 127 + 128
        local g = math.sin(frequency * t + 2 * math.pi / 3) * 127 + 128
        local b = math.sin(frequency * t + 4 * math.pi / 3) * 127 + 128
        return Color3.new(r / 255, g / 255, b / 255)
    end

    local function updateColor()
        while true do
            local t = tick()
            block.BrickColor = BrickColor.new(rainbowColor(t))
            wait(0.1)
        end
    end

    coroutine.wrap(updateColor)()

    local function checkAirborne()
        while true do
            if character and character:FindFirstChild("Humanoid") then
                local humanoid = character.Humanoid
                if humanoid:GetState() == Enum.HumanoidStateType.Seated then
                    local targetPosition = character.HumanoidRootPart.Position + Vector3.new(0, -5, 0)
                    block.CFrame = CFrame.new(targetPosition)
                else
                    block.CFrame = CFrame.new(character.HumanoidRootPart.Position) * CFrame.new(0, -5, 0)
                end
            end
            wait(0.1)
        end
    end

    coroutine.wrap(checkAirborne)()
end

-- Error handling and platform creation
local function onPlayerCharacterAdded(character)
    character:WaitForChild("Humanoid", 10)
    createInvisiblePlatform()
end

game.Players.LocalPlayer.CharacterAdded:Connect(onPlayerCharacterAdded)

-- Execute the functions immediately if the character is already loaded
if game.Players.LocalPlayer.Character then
    onPlayerCharacterAdded(game.Players.LocalPlayer.Character)
end
